{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ilya'\\\\Desktop\\\\react-quiz-master1\\\\src\\\\containers\\\\Quiz.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { getQuiz } from '../store/actions/quiz';\nimport backspaceImg from \"../assets/icons/backspace.svg\";\nimport correctImg from \"../assets/icons/correct.svg\";\nimport wrongImg from \"../assets/icons/wrong.svg\";\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      step: 0,\n      isFinished: false,\n      pickedAnswers: []\n    };\n\n    this.nextQuestion = pickedAnswer => {\n      if (Number(this.state.step) !== this.props.currentQuiz.questions.length - 1) {\n        this.setState({\n          step: this.state.step + 1\n        });\n      } else {\n        this.setState({\n          isFinished: true\n        });\n      }\n\n      const newPickedAnswers = [...this.state.pickedAnswers];\n      newPickedAnswers[this.state.step] = pickedAnswer;\n      this.setState({\n        pickedAnswers: newPickedAnswers\n      });\n    };\n\n    this.pickStep = step => {\n      this.setState({\n        step\n      });\n    };\n\n    this.restart = () => {\n      this.setState({\n        step: 0,\n        isFinished: false,\n        pickedAnswers: []\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.getQuiz(this.props.match.params.id);\n  }\n\n  render() {\n    return React.createElement(\"main\", {\n      className: \"quiz-single\",\n      style: {\n        background: this.props.currentQuiz.gradient\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(NavLink, {\n      to: \"/\",\n      className: \"backspace\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: backspaceImg,\n      alt: \"backspace\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    })), React.createElement(\"h1\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, this.props.currentQuiz.name), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, !this.state.isFinished ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz__question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.props.currentQuiz.questions[this.state.step].title, React.createElement(\"img\", {\n      src: correctImg,\n      alt: \"correctImg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"quiz__answers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.props.currentQuiz.questions[this.state.step].answers.map((answer, idx) => React.createElement(\"div\", {\n      \"data-test\": this.state.pickedAnswers[idx],\n      className: `quiz__answer ${this.state.pickedAnswers[this.state.step] === answer ? 'active' : ''}`,\n      key: idx,\n      onClick: () => this.nextQuestion(answer),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, answer))), React.createElement(\"div\", {\n      className: \"quiz__steps\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.props.currentQuiz.questions.map((question, idx) => React.createElement(\"div\", {\n      className: `quiz__step ${this.state.pickedAnswers.length >= idx ? 'active' : ''}`,\n      key: idx,\n      onClick: () => this.state.step >= idx ? this.pickStep(idx) : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, idx + 1)))) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"quiz__finish-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"\\u0412\\u044B \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u043F\\u0440\\u043E\\u0448\\u043B\\u0438 \\u0442\\u0435\\u0441\\u0442!\"), React.createElement(\"div\", {\n      className: \"quiz__finish-result\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, this.props.currentQuiz.questions.map((question, idx) => React.createElement(\"div\", {\n      className: \"quiz__finish-answer\",\n      key: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, question.title, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.state.pickedAnswers[idx])), question.correctAnswer === this.state.pickedAnswers[idx] ? React.createElement(\"img\", {\n      src: correctImg,\n      alt: \"correctImg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }) : React.createElement(\"img\", {\n      src: wrongImg,\n      alt: \"correctImg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"quiz__finish-btns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.restart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"\\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0437\\u0430\\u043D\\u043E\\u0432\\u043E\"), React.createElement(NavLink, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"\\u0412\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C\\u0441\\u044F \\u043D\\u0430 \\u0433\\u043B\\u0430\\u0432\\u043D\\u0443\\u044E\"))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentQuiz: state.quiz.currentQuiz\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuiz: quizId => dispatch(getQuiz(quizId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","map":{"version":3,"sources":["C:/Users/Ilya'/Desktop/react-quiz-master1/src/containers/Quiz.js"],"names":["React","Component","Fragment","connect","NavLink","getQuiz","Quiz","state","step","isFinished","pickedAnswers","nextQuestion","pickedAnswer","Number","props","currentQuiz","questions","length","setState","newPickedAnswers","pickStep","restart","componentDidMount","match","params","id","render","background","gradient","backspaceImg","name","title","correctImg","answers","map","answer","idx","question","correctAnswer","wrongImg","mapStateToProps","quiz","mapDispatchToProps","dispatch","quizId"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nimport {getQuiz} from '../store/actions/quiz'\r\n\r\nimport backspaceImg from '../assets/icons/backspace.svg'\r\nimport correctImg from '../assets/icons/correct.svg'\r\nimport wrongImg from '../assets/icons/wrong.svg'\r\n\r\nclass Quiz extends Component {\r\n\tstate = {\r\n\t\tstep: 0,\r\n\t\tisFinished: false,\r\n\t\tpickedAnswers: []\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.getQuiz(this.props.match.params.id)\r\n\t}\r\n\r\n\tnextQuestion = (pickedAnswer) => {\r\n\t\tif (Number(this.state.step) !== this.props.currentQuiz.questions.length-1) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tstep: this.state.step + 1\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisFinished: true\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tconst newPickedAnswers = [...this.state.pickedAnswers]\r\n\t\tnewPickedAnswers[this.state.step] = pickedAnswer\r\n\t\tthis.setState({\r\n\t\t\tpickedAnswers: newPickedAnswers\r\n\t\t})\r\n\t}\r\n\r\n\tpickStep = (step) => {\r\n\t\tthis.setState({\r\n\t\t\tstep\r\n\t\t})\r\n\t}\r\n\r\n\trestart = () => {\r\n\t\tthis.setState({\r\n\t\t\tstep: 0,\r\n\t\t\tisFinished: false,\r\n\t\t\tpickedAnswers: []\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<main className=\"quiz-single\" style={{background: this.props.currentQuiz.gradient}}>\r\n\t\t\t\t<NavLink to=\"/\" className=\"backspace\">\r\n\t\t\t\t\t<img src={backspaceImg} alt=\"backspace\" />\r\n\t\t\t\t</NavLink>\r\n\t\t\t\t<h1 className=\"title\">{this.props.currentQuiz.name}</h1>\r\n\t\t\t\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\r\n\t\t\t\t\t<div className=\"quiz\">\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t{!this.state.isFinished ? (\r\n\t\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t\t<div className=\"quiz__question\">\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t{this.props.currentQuiz.questions[this.state.step].title}\r\n\t\t\t\t\t\t\t\t\t<img src={correctImg} alt=\"correctImg\" />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<div className=\"quiz__answers\">\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t{this.props.currentQuiz.questions[this.state.step].answers.map((answer, idx) => (\r\n\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\tdata-test={this.state.pickedAnswers[idx]}\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={`quiz__answer ${this.state.pickedAnswers[this.state.step] === answer ? 'active' : ''}`}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.nextQuestion(answer)}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{answer}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"quiz__steps\">\r\n\t\t\t\t\t\t\t\t\t{this.props.currentQuiz.questions.map((question, idx) => (\r\n\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={`quiz__step ${this.state.pickedAnswers.length >= idx ? 'active' : ''}`}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.state.step >= idx ? this.pickStep(idx) : false}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{idx+1}\r\n\t\t\t\t\t\t\t\t\t\t</div>\t\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t\t<h1 className=\"quiz__finish-title\">Вы успешно прошли тест!</h1>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<div className=\"quiz__finish-result\">\r\n\t\t\t\t\t\t\t\t\t{this.props.currentQuiz.questions.map((question, idx) => (\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"quiz__finish-answer\" key={idx}>\r\n\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t{question.title}\r\n\t\t\t\t\t\t\t\t\t\t\t<strong>{this.state.pickedAnswers[idx]}</strong>\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t{question.correctAnswer === this.state.pickedAnswers[idx] ? (\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={correctImg} alt=\"correctImg\" />\r\n\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={wrongImg} alt=\"correctImg\" />\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"quiz__finish-btns\">\r\n\t\t\t\t\t\t\t\t\t<button onClick={this.restart}>Начать заново</button>\r\n\t\t\t\t\t\t\t\t\t<NavLink to=\"/\">Вернуться на главную</NavLink>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</main>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst  mapStateToProps = state => {\r\n\treturn {\r\n\t\tcurrentQuiz: state.quiz.currentQuiz\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tgetQuiz: quizId => dispatch(getQuiz(quizId))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz)"]},"metadata":{},"sourceType":"module"}